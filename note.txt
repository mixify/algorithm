set은 insert를 사용한다!!!!

int A[11][11];// 1부터 시작하는거는 헤깔리지 말게 이렇게 풀자 앞으로...

// 자료구조가 루프를 돌면서 변형되는 거라면 잘 고려하자 복사를 하던

for (idx_itr = tree.begin(); idx_itr != tree.end();)//set 은 !=로 순회 검사
    tree_itr = tree_on_land[idx_itr->first][idx_itr->second].erase(tree_itr);
    // erase 리턴값으로 꼭 가야한다 까먹지 말자 시벌

str.append(1,panel[x][y]+'0'); // string에 char 한글짜식 추가하는 방법임!

cout>>max_idx.top();//stack 은 제이랑피 top이다

그냥 queue 는 순회가 안된다~~~~
int amount = stoi(str.substr(1,str.length()-1)); string to ascii~~

<algorithm> => lower_bound, upper_bound 사용 가능~~ lower_bound 는 크거나
같은수를 구함~~~ upper_bound는 무조건 큰수만~~ 둘다 위치를 구해줌~~
vector<int>(1,ori) ori 로 초기화된 1개의 원소를 가지는 벡터

ios::sync_with_stdio(false);
cin.tie(NULL); => cin 속도 개선

bool compare 를 만들어서 정렬을 오름차순, 내림차순 할 수 있다.


이거시 바로 조합생성 알고리즘
vector <vector<int> > combination(int n, int r)
{
    vector <vector<int> > comb;
    vector <int> num;
    for (int i = 0; i < n; ++i) {
        num.push_back(i);
    }
    vector<int> ind;

    for (int i = 0; i < r; ++i) {
        ind.push_back(1);
    }
    for (int i = 0; i < n-r; ++i) {
        ind.push_back(0);
    }

    sort(ind.begin(),ind.end());

    do{
        vector<int> one_comb;
        for (int i = 0; i < ind.size(); ++i) {
            if(ind[i] == 1)
                one_comb.push_back(num[i]);
        }
        comb.push_back(one_comb);
    }while(next_permutation(ind.begin(),ind.end()));

    return comb;
}

compare 함수 override 할때 오름차순 => < 로 한다~~~~~


n1_cctv.push_back({i,j,0}); 구조체 푸쉬백 개 꿀팁~~~

y,x 변수명 주의 bfs할때 i,j 다음에 k이다 q 순회할떄 주의!
마찬가리로 N,M 가로세로 주의~~~
switch case문 안에서 변수선언시 감싸라

크기 보고 long long 견적잡자~~

c++ to_string 사용가능





triangulation
임의의 폴리곤이 주어짐 이걸 삼각형 들로 쪼개자(물리학,지리학, 경제학 에서 사용)
triangulation이 항상 있을까? unique() 한가?
va,vb diagonal => vavb < P-interior U {va,vb} 즉 inside P 이다.
기본적으로 diagonal을 만들어가면서 만들어 간다~~~

diagonal test는 어떻게 하나? O(n)
1. 모든 vi,vi+1에 대해서 intersect(vi,vi+1,va,vb) => false를 체크한다
    exception(양끝이 a,b가 된다.)
    incone test => 각 상황(오목이 볼록이) 마다 내부인지 검사 convex hull
    했을때처럼 외적의 양,음 여부 조사
    볼록
    SA(a,b,prev(a)) > 0 && SA(a,b,next(a)) < 0
    오목
    위 케이스의 여집합 !키워드 쓰면 될듯
    lefton 뭔지모르겠다..

즉 앞뒤꺼 연결해서 in 되는지 ear

ear 양옆 잘라 => go 알고리즘(새로운 triangle 생김)
이제 vertex하 적은 polyginal 생김
이제 잘랐으니까 다시 ear를 업데이트 하자(바로 잘리진 양끝만)
